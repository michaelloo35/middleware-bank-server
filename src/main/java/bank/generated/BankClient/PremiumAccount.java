// **********************************************************************
//
// Copyright (c) 2003-2018 ZeroC, Inc. All rights reserved.
//
// This copy of Ice is licensed to you under the terms described in the
// ICE_LICENSE file included in this distribution.
//
// **********************************************************************
//
// Ice version 3.7.1
//
// <auto-generated>
//
// Generated from file `bankClient.ice'
//
// Warning: do not edit this file.
//
// </auto-generated>
//

package BankClient;

public interface PremiumAccount extends Account
{
    CreditInfo applyForCredit(double value, CurrencyType currency, Date from, Date to, com.zeroc.Ice.Current current)
        throws DateRangeError,
               NotAuthrorizedException;

    static final String[] _iceIds =
    {
        "::BankClient::Account",
        "::BankClient::PremiumAccount",
        "::Ice::Object"
    };

    @Override
    default String[] ice_ids(com.zeroc.Ice.Current current)
    {
        return _iceIds;
    }

    @Override
    default String ice_id(com.zeroc.Ice.Current current)
    {
        return ice_staticId();
    }

    static String ice_staticId()
    {
        return "::BankClient::PremiumAccount";
    }

    static java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceD_applyForCredit(PremiumAccount obj, final com.zeroc.IceInternal.Incoming inS, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        com.zeroc.Ice.Object._iceCheckMode(null, current.mode);
        com.zeroc.Ice.InputStream istr = inS.startReadParams();
        double iceP_value;
        CurrencyType iceP_currency;
        final com.zeroc.IceInternal.Holder<Date> icePP_from = new com.zeroc.IceInternal.Holder<>();
        final com.zeroc.IceInternal.Holder<Date> icePP_to = new com.zeroc.IceInternal.Holder<>();
        iceP_value = istr.readDouble();
        iceP_currency = CurrencyType.ice_read(istr);
        istr.readValue(v -> icePP_from.value = v, Date.class);
        istr.readValue(v -> icePP_to.value = v, Date.class);
        istr.readPendingValues();
        inS.endReadParams();
        Date iceP_from = icePP_from.value;
        Date iceP_to = icePP_to.value;
        CreditInfo ret = obj.applyForCredit(iceP_value, iceP_currency, iceP_from, iceP_to, current);
        com.zeroc.Ice.OutputStream ostr = inS.startWriteParams();
        ostr.writeValue(ret);
        ostr.writePendingValues();
        inS.endWriteParams(ostr);
        return inS.setResult(ostr);
    }

    final static String[] _iceOps =
    {
        "accountBalance",
        "applyForCredit",
        "deposit",
        "ice_id",
        "ice_ids",
        "ice_isA",
        "ice_ping"
    };

    @Override
    default java.util.concurrent.CompletionStage<com.zeroc.Ice.OutputStream> _iceDispatch(com.zeroc.IceInternal.Incoming in, com.zeroc.Ice.Current current)
        throws com.zeroc.Ice.UserException
    {
        int pos = java.util.Arrays.binarySearch(_iceOps, current.operation);
        if(pos < 0)
        {
            throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
        }

        switch(pos)
        {
            case 0:
            {
                return Account._iceD_accountBalance(this, in, current);
            }
            case 1:
            {
                return _iceD_applyForCredit(this, in, current);
            }
            case 2:
            {
                return Account._iceD_deposit(this, in, current);
            }
            case 3:
            {
                return com.zeroc.Ice.Object._iceD_ice_id(this, in, current);
            }
            case 4:
            {
                return com.zeroc.Ice.Object._iceD_ice_ids(this, in, current);
            }
            case 5:
            {
                return com.zeroc.Ice.Object._iceD_ice_isA(this, in, current);
            }
            case 6:
            {
                return com.zeroc.Ice.Object._iceD_ice_ping(this, in, current);
            }
        }

        assert(false);
        throw new com.zeroc.Ice.OperationNotExistException(current.id, current.facet, current.operation);
    }
}
